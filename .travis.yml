# Initially copied from https://github.com/nomeata/darcs-mirror-circle-packing
# LICENSE is at the bottom


# NB: don't set `language: haskell` here
language: c

# See also https://github.com/hvr/multi-ghc-travis for more information

# explicitly request legacy non-sudo based build environment
sudo: required

# Caching so the next build will be fast too.
#
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $HOME/.cabal/packages/head.hackage

# The following lines enable several GHC versions and/or HP versions
# to be tested; often it's enough to test only against the last
# release of a major GHC version. Setting HPVER implictly sets
# GHCVER. Omit lines with versions you don't need/want testing for.
matrix:
  include:
    - env: CABALVER=1.24 GHCVER=8.0.1   # 4.9
    - env: CABALVER=2.0 GHCVER=8.2.2   # 4.10
    - env: CABALVER=head GHCVER=head
  allow_failures:
    - env: CABALVER=head GHCVER=head

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - echo "$(which ghc)"
 - travis_retry cabal update
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 # -v2 provides useful information for debugging
 - cabal new-configure  # --enable-tests --enable-benchmarks 

 # this builds all libraries and executables
 # (including tests/benchmarks)
 - cabal new-build

 # - cabal test
 - cabal check

 # tests that a source-distribution can be generated
 - cabal sdist

# # check that the generated source-distribution can be built & installed
# - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
#   cd dist/;
#   if [ -f "$SRC_TGZ" ]; then
#      cabal install --force-reinstalls "$SRC_TGZ";
#   else
#      echo "expected '$SRC_TGZ' not found";
#      exit 1;
#   fi

# EOF


# Copyright (c) 2012, Joachim Breitner
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
# 
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
# 
#     * Neither the name of Joachim Breitner nor the names of other
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

